@use "sass:map";
@import 'shared-styles/assets/sass/scss/generic/variables';
@import 'shared-styles/assets/sass/scss/iconography/svg-icons-metis';
@import 'mixins/orb-customisation';

$orb-border-radius: 1.5em;

$defaultPalette: (
  'activated-background': $eu-light-orange,
  'activated-border': $white,
  'activated-foreground': $white,
  'active-background': $white,
  'active-border': $eu-light-orange,
  'active-foreground': $eu-light-orange,
  'background': $eu-jade-light,
  'border': $eu-jade-dark,
  'foreground': $white,
  'hover-background': $white,
  'hover-foreground': $eu-jade-dark
);

.home-orb-container {
  display: none;
}

.nav-orb {
  border-radius: $orb-border-radius;
  border-style: solid;
  border-width: 1px;

  display: inline-block;
  height: 3em;
  margin: 0;
  min-width: 3em;
  position: relative;
  text-align: left;
  transition: 0.3s ease-in border-radius;
  width: 3em;

  &::after {
    font-size: 1.25em;
  }
  &.next {
    margin-left: 0.25em;
  }

  &::after {
    content: attr(data-label);
  }

  &.indicate-tier::before {
    background-color: map.get($defaultPalette, 'background');
    color: $white;
    content: attr(data-indicator);
    line-height: 16px;
    text-align: center;
    font-size: 16px;
    padding: 1px;
  }

  &.labelled {
    &:after {
      font-weight: bold;
      position: absolute;
      text-align: center;
      width: 100%;
    }
  }

  &.spinner::after {
    content: '';
  }

  &.indicator-orb::before {
    border: 1px solid $eu-jade-dark;
    border-radius: 1em;
    position: absolute;
    left: 50%;
    top: 100%;
    transform: translate(-50%, -25%);
    width: 1em;
    height: 1em;
  }

  &.indicator-orb:not([data-indicator])::before {
    $foreground: map.get($defaultPalette, 'foreground');
    $background: map.get($defaultPalette, 'background');
    background: svg-url-icon-tick($foreground) center 75% / 75% no-repeat $background;
  }

  &:hover {
    box-shadow: rgba(25, 115, 36, 0.35) 0px 5px 15px;
    &.indicator-orb::before {
      background-color: map.get($defaultPalette, 'hover-background');
      color: map.get($defaultPalette, 'hover-foreground');
    }
    &:not([data-indicator]):not(.warning-animated)::before {
      background-image: svg-url-icon-tick(map.get($defaultPalette, 'hover-foreground'));
    }
  }

  &:active,
  &:active:hover {
    &.indicator-orb::before {
      border-color: map.get($defaultPalette, 'active-border');
      background-color: map.get($defaultPalette, 'active-background');
      color: map.get($defaultPalette, 'active-foreground');
    }
    &.indicator-orb:not([data-indicator])::before {
      background-image: svg-url-icon-tick(map.get($defaultPalette, 'active-foreground'));
    }
  }

  &.is-active {
    pointer-events: none;
    &.allow-active-clicks {
      pointer-events: all;
    }

    &.indicator-orb::before {
      border-color: map.get($defaultPalette, 'activated-border');
      background-color: map.get($defaultPalette, 'activated-background');
    }
    &.indicator-orb:not([data-indicator])::before {
      background-image: svg-url-icon-tick(map.get($defaultPalette, 'activated-foreground'));
    }
  }

  &.spinner,
  &.indicate-polling {
    &.indicator-orb::before {
      background-position: center;
      background-repeat: no-repeat;
    }
    &.indicator-orb:not([data-indicator]) {
      &::before {
        background-image: svg-url-icon-spin(map.get($defaultPalette, 'foreground'));
      }
      &:hover::before {
        background-image: svg-url-icon-spin(map.get($defaultPalette, 'hover-foreground'));
      }
      &:active,
      &.is-active:active,
      &.is-active:hover {
        border-color: map.get($defaultPalette, 'active-border');
        &::before {
          background-color: map.get($defaultPalette, 'active-background');
          background-image: svg-url-icon-spin(map.get($defaultPalette, 'active-foreground'));
          border-color: map.get($defaultPalette, 'active-border');
        }
      }
      &.is-active,
      &.is-active:active:hover {
        border-color: map.get($defaultPalette, 'activated-border');
        &::before {
          background-color: map.get($defaultPalette, 'activated-background');
          background-image: svg-url-icon-spin(map.get($defaultPalette, 'activated-foreground'));
          border-color: map.get($defaultPalette, 'activated-border');
        }
      }
    }
  }

  &:not(.spinner) {
    &.upload-orb {
      @include custom-orb(get-function(svg-url-icon-cloud), 2.25rem, $defaultPalette);
    }

    &.problem-orb {
      @include custom-orb(get-function(svg-url-icon-lightbulb), 1.5rem, $defaultPalette);
    }

    &.progress-orb {
      @include custom-orb(get-function(svg-url-icon-dataset), 1.75rem, $defaultPalette);
    }

    &.report-orb {
      @include custom-orb(get-function(svg-url-icon-record-report), 1.5rem, $defaultPalette);
    }

    &.content-tier-orb {
      @include custom-orb(get-function(svg-url-icon-content-tier), 1.85rem, $defaultPalette);
    }

    &.metadata-tier-orb {
      @include custom-orb(get-function(svg-url-icon-metadata), 2.05rem, $defaultPalette);
    }

    &.orb-media-3d {
      @include custom-orb(get-function(svg-url-icon-media-3d), 1.8rem, $defaultPalette);
    }

    &.orb-media-audio {
      @include custom-orb(get-function(svg-url-icon-media-audio), 1.8rem, $defaultPalette);
    }

    &.orb-media-image {
      @include custom-orb(get-function(svg-url-icon-media-image), 1.8rem, $defaultPalette);
    }

    &.orb-media-text {
      @include custom-orb(get-function(svg-url-icon-media-text), 1.8rem, $defaultPalette);
    }

    &.orb-media-video {
      @include custom-orb(get-function(svg-url-icon-media-video), 1.8rem, $defaultPalette);
    }

    &.orb-media-unknown {
      @include basic-orb($defaultPalette);
      &::after {
        content: '?';
        top: 50%;
        transform: translateY(-50%);
      }
    }

    &.language-orb {
      @include custom-orb(get-function(svg-url-icon-speech-bubble), 1.5rem, $defaultPalette);
    }

    &.element-orb {
      @include custom-orb(get-function(svg-url-icon-xml), 1.8rem, $defaultPalette);
    }

    &.classes-orb {
      @include custom-orb(get-function(svg-url-icon-classes), 2.2rem, $defaultPalette);
    }
  }
  &.indicator-orb:not([data-indicator]),
  &.spinner {
    &::before {
      content: '';
    }
  }

  @keyframes fadein {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  &.indicate-polling::before {
    animation: fadein 2000ms infinite;
  }
}

.spinner {
  background: svg-url-icon-spin(map.get($defaultPalette, 'foreground')) center / 2em no-repeat
    map.get($defaultPalette, 'background');

  &:hover {
    background-color: map.get($defaultPalette, 'hover-background');
    background-image: svg-url-icon-spin(map.get($defaultPalette, 'hover-foreground'));
  }

  &:active,
  &.is-active:hover {
    background-color: map.get($defaultPalette, 'active-background');
    background-image: svg-url-icon-spin(map.get($defaultPalette, 'active-foreground'));
  }

  &.is-active,
  &.is-active:active:hover {
    background-color: map.get($defaultPalette, 'activated-background');
    background-image: svg-url-icon-spin(map.get($defaultPalette, 'activated-foreground'));
  }
}

.warning-animated {
  &::before {
    @keyframes spin {
      100% {
        transform: rotateY(180deg);
      }
    }
    animation: spin 0.6s linear 1;
    bottom: -0.75rem;
    content: '';
    display: inline-block;
    height: 22px;
    left: calc(50% - 10px);
    position: absolute;
    width: 20px;
    z-index: 1;
  }
}

.warning-animated::before {
  background: svg-url-icon-warning-detailed($eu-yellow, $white, $eu-red) center no-repeat;
}

.vertical {
  .sandbox-status {
    flex-direction: column;
    .orb-container:not(.hidden) {
      height: 48px;
      & + .orb-container {
        margin-top: 7px;
      }
    }
  }
}

.sandbox-status {
  display: flex;
  justify-content: space-evenly;
  width: 100%;
}

.sandbox-navigation-head .sandbox-status li {
  position: relative;
  top: 2em;
}
